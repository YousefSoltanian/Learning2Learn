# convert_to_npz.jl
#
# This script loads the JLD2 files that were generated by your simulation code,
# extracts the relevant variables, and then saves them in Python-friendly NPZ format.
#
# You must have the following packages installed:
#   - JLD2 (for reading the JLD2 files)
#   - NPZ  (for writing NPZ files)
#
# To install these packages, use:
#   import Pkg; Pkg.add("JLD2"); Pkg.add("NPZ")

using JLD2
using NPZ

"""
    convert_jld2_to_npz(jld2_filepath::String, npz_filepath::String, key::String)

Reads a JLD2 file from `jld2_filepath`, extracts the variable stored under the provided `key`
(e.g. "all_simulations" or "all_estimations"), and writes it to an NPZ file at `npz_filepath`.
The NPZ file will contain a single key `"data"` with the contents of the extracted variable.
"""
function convert_jld2_to_npz(jld2_filepath::String, npz_filepath::String, key::String)
    # Load all data from the JLD2 file; this returns a dictionary mapping keys to stored objects.
    data_dict = load(jld2_filepath)
    
    if haskey(data_dict, key)
        converted_data = data_dict[key]
        # Save the data under key "data" for Python-friendly loading with allow_pickle=True.
        npzwrite(npz_filepath, Dict("data" => converted_data))
        println("Converted $(jld2_filepath) (key: \"$key\") to $(npz_filepath)")
    else
        println("Error: Key \"$key\" not found in $(jld2_filepath).")
    end
end

function main()
    # File paths (adjust these paths if needed)
    sim_jld2 = "data/LunarLander_Complete_Info_Peer.jld2"
    est_jld2 = "data/LunarLander_Estimations.jld2"

    sim_npz = "data/LunarLander_Complete_Info_Peer.npz"
    est_npz = "data/LunarLander_Estimations.npz"
    
    # Convert both files:
    convert_jld2_to_npz(sim_jld2, sim_npz, "all_simulations")
    convert_jld2_to_npz(est_jld2, est_npz, "all_estimations")
end

# Run the conversion script
main()
